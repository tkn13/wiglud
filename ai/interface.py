import glob
import pickle
import numpy
import sys
from music21 import converter, instrument, note, chord , instrument, note, stream
import os
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'
from keras.layers import Input
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM
from keras.layers import Activation
from keras.layers import BatchNormalization as BatchNorm
from keras.utils import to_categorical
from keras.callbacks import ModelCheckpoint

from midi2audio import FluidSynth
from pydub import AudioSegment

from time import sleep

beethModelPath = r"../ai/model/model_beeth.keras"
beethNotePath = r"../ai/midi_songs/beeth_note"

mendelssohnModelPath = r"../ai/model/model_mendelssohn.keras"
mendelssohnNotePath = r"../ai/midi_songs/mendelssohn_note"

schubertModelPath = r"../ai/model/model_schubert.keras"
schubertNotePath = r"../ai/midi_songs/schubert_note"

def prepare_sequences(notes, pitchnames, n_vocab):
    """ Prepare the sequences used by the Neural Network """
    # Map between notes and integers and back
    note_to_int = dict((note, number) for number, note in enumerate(pitchnames))

    sequence_length = 100
    network_input = []
    output = []
    for i in range(0, len(notes) - sequence_length, 1):
        sequence_in = notes[i:i + sequence_length]
        sequence_out = notes[i + sequence_length]
        network_input.append([note_to_int[char] for char in sequence_in])
        output.append(note_to_int[sequence_out])

    n_patterns = len(network_input)

    # Reshape the input into a format compatible with LSTM layers
    normalized_input = numpy.reshape(network_input, (n_patterns, sequence_length, 1))
    # Normalize input
    normalized_input = normalized_input / float(n_vocab)

    return (network_input, normalized_input)

def create_network(network_input, n_vocab):
    """ create the structure of the neural network """
    model = Sequential()
    model.add(Input(shape=(network_input.shape[1], network_input.shape[2])))
    model.add(LSTM(512, recurrent_dropout=0.3, return_sequences=True))
    model.add(LSTM(512, return_sequences=True, recurrent_dropout=0.3))
    model.add(LSTM(512))
    model.add(BatchNorm())
    model.add(Dropout(0.3))
    model.add(Dense(256))
    model.add(Activation('relu'))
    model.add(BatchNorm())
    model.add(Dropout(0.3))
    model.add(Dense(n_vocab))
    model.add(Activation('softmax'))

    return model

def generate_notes(model, network_input, pitchnames, n_vocab, noteAmount):
    """ Generate notes from the neural network based on a sequence of notes """
    # Pick a random sequence from the input as a starting point for the prediction
    start = numpy.random.randint(0, len(network_input) - 1)

    int_to_note = dict((number, note) for number, note in enumerate(pitchnames))

    pattern = network_input[start]
    prediction_output = []

    # Generate 500 notes
    for note_index in range(noteAmount*240):
        prediction_input = numpy.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(n_vocab)

        prediction = model.predict(prediction_input, verbose=0)

        index = numpy.argmax(prediction)
        result = int_to_note[index]
        prediction_output.append(result)

        pattern.append(index)
        pattern = pattern[1:len(pattern)]

    return prediction_output

def create_midi(prediction_output, instrument_type, file_name):
    """ Convert the output from the prediction to notes and create a midi file from the notes """
    offset = 0
    output_notes = []
    if instrument_type == "Piano":
        chosen_instrument = instrument.Piano()
    elif instrument_type == "Guitar":
        chosen_instrument = instrument.Guitar()
    elif instrument_type == "Saxophone":
        chosen_instrument = instrument.SopranoSaxophone()
    elif instrument_type == "Violin":
        chosen_instrument = instrument.Violin()
    elif instrument_type == "Electric Guitar":
        chosen_instrument = instrument.ElectricGuitar()
    elif instrument_type == "Flute":
        chosen_instrument = instrument.Flute()
    elif instrument_type == "Cello":
        chosen_instrument = instrument.Cello()
    elif instrument_type == "Clarinet":
        chosen_instrument = instrument.Clarinet()
    elif instrument_type == "Harp":
        chosen_instrument = instrument.Harp()
    else:
        chosen_instrument = instrument.Piano()

    # Create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        # Pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = chosen_instrument
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # Pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = chosen_instrument
            output_notes.append(new_note)

        # Increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)
    midi_stream.insert(0, chosen_instrument)
    midi_stream.write('midi', fp=f'../generated_music/{file_name}.mid')
    
    sleep(3)

    # Convert MIDI to MP3
    midiFile = '../generated_music/' + file_name + '.mid'
    outputFile = '../generated_music/' + file_name + '.mp3'
    midi_to_mp3(midiFile, 'FluidR3_GM.sf2', outputFile)

def MusicTypeSelector(musicType):
    if musicType == "beeth":
        return beethModelPath, readMusicNote(beethNotePath)
    elif music_type == "mendelssohn":
        return mendelssohnModelPath, readMusicNote(mendelssohnNotePath)
    elif music_type == "schubert":
        return schubertModelPath, readMusicNote(schubertNotePath)
    else : 
        return beethModelPath, readMusicNote(beethNotePath)

def readMusicNote(path) :
    """ Load the notes from the 'notes' file """
    with open(path, 'rb') as filepath:
        notes = pickle.load(filepath)
    return notes

def GenerateMusic(duration, music_type, instrument_type, file_name):
    # notes = readMusicNote("../ai/midi_songs/jrpg_note.txt")
    checkpoint_path, notes = MusicTypeSelector(music_type)
    n_vocab = len(set(notes))
    pitchnames = sorted(set(item for item in notes))
    network_input, network_output = prepare_sequences(notes, pitchnames, n_vocab)
    model = create_network(network_output, n_vocab)

    model.load_weights(checkpoint_path)
    model.compile(optimizer='rmsprop', loss='categorical_crossentropy')

    prediction_output = generate_notes(model, network_input, pitchnames, n_vocab, duration)
    create_midi(prediction_output, instrument_type, file_name)

def midi_to_mp3(midi_file, soundfont_file, output_mp3):
    # Convert MIDI to WAV using FluidSynth
    fs = FluidSynth(soundfont_file)
    wav_output = 'output.wav'
    fs.midi_to_audio(midi_file, wav_output)

    # Convert WAV to MP3 using pydub
    audio = AudioSegment.from_wav(wav_output)
    audio.export(output_mp3, format="mp3")
    print(f"Conversion completed: {output_mp3}")

if __name__ == "__main__":
    # Ensure the function name and parameters are passed
    if len(sys.argv) == 5 :
        duration = int(sys.argv[1])
        music_type = sys.argv[2]
        instrument_type = sys.argv[3]
        file_name = sys.argv[4]

        try:
            GenerateMusic(duration, music_type, instrument_type, file_name)
        except Exception as e:
            print(f"Error executing function: {str(e)}")
    else:
        print("No function specified")